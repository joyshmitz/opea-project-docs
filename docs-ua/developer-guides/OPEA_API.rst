.. _OPEA_API:

OPEA API Service Spec (v0.9)
############################

Автори:

.. rst-class:: rst-columns

* feng.tian@intel.com
* liang1.lv@intel.com
* haihao.shen@intel.com
* kaokao.lv@intel.com

Ця специфікація використовується для визначення спокійного API сервісу OPEA Mega для доступу користувачів, 
а також для визначення вхідних і вихідних даних усіх мікросервісів OPEA, щоб розробник міг побудувати сервіс OPEA Mega.

.. Примітка:: Ця специфікація сервісу API знаходиться в процесі розробки і може бути неповною та містити помилки.

.. contents:: API Services Table of Contents
   :depth: 2
   :local:

-----

OPEA Mega Service API
*********************

OPEA Mega Service - це основний вхід, до якого користувач може отримати доступ для готового додатку GenAI. 
Такий додаток GenAI складається з одного або декількох мікросервісів OPEA, з'єднаних у вигляді DAG (спрямованого ациклічного графа) 
і побудованих як робочий процес виконання для розробника для створення складних додатків.

-----

.. _list_services:

Список сервісів
===============

Список усіх сервісів, які підтримує OPEA Mega Service.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **GET**
     - ``/v1/list_service``

Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             <service_name>: <service_description>
          }

       ``service_name (string)``
         Кінцеві точки або URL-адреси, які обслуговує мега-сервіс OPEA. Наприклад,
         ``/v1/RAG``.

         Зверніть увагу, що деякі ключові слова, такі як 
         ``/v1/audio/speech``, ``/v1/audio/transcriptions``, ``/v1/embeddings``, ``/v1/chat/completions``
         зарезервовано для сумісного з openAI Mega Service.

       ``service_description (string)``
         Детальний опис використання, який користувач використовував для доступу до вказаних кінцевих точок 
         або адрес, які обслуговує мега-сервіс OPEA, включаючи формат і деталі запитів і повідомлень.
   * - **405**
     - ``{"error": "Retrieve service name wrongly."}``

-----

Список параметрів, що налаштовуються
====================================

Список всіх параметрів, що налаштовуються, щоб користувачі могли контролювати поведінку OPEA Mega Service.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **GET**
     - ``/v1/list_parameters``

Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             <micro_service_name>:
             {
                <parameter_name>: data_type,
                . . .
             }
          }

       ``micro_service_name (string)``
         Ім'я мікросервісу в OPEA мегасервісу, в якому можна налаштувати деякі параметри.

       ``parameter_name (string)``
         Ім'я параметра, що налаштовується в мегасервісі OPEA.

       ``data_type (string)``
         Підтримувані типи даних: ``"string"`` або ``"integer"``.

       Наприклад: ``{"/v1/llm_generate": {"max_tokens": "integer"}}``
   * - **405**
     - ``{"error": "Retrieve configurable parameter wrongly."}``

-----

Вбудовування
============

**Необов'язково**. Якщо існує лише один мікросервіс OPEA, який розкриває  ``/micro_service/embedding``, інтерфейс побудовано як мегасервіс OPEA.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **POST**
     - ``/v1/list_parameters``

.. list-table::
   :header-rows: 1

   * - Тип
     - Параметри
     - Значення
     - Потрібно
     - Опис
   * - **POST**
     - ``input``
     - ``string``
     - необхідний
     - Введіть текст для вбудовування, закодований у вигляді рядка або масиву токенів. 
       Щоб вбудувати кілька вхідних даних в один запит, передайте масив рядків або масив масивів токенів. 
       Вхідні дані не повинні перевищувати максимальну кількість вхідних токенів для моделі (8192 токени для text-embedding-ada-002), 
       не можуть бути порожнім рядком, а будь-який масив повинен мати розмірність 2048 або менше.
   * - **POST**
     - ``model``
     - ``string``
     - застарілий
     - Ідентифікатор моделі для використання.
   * - **POST**
     - ``encoding_format``
     - ``string``
     - необхідний
     - Формат, у якому потрібно повернути вбудовування. Може бути як ``"float"``, так і ``"base64"``.
   * - **POST**
     - ``dimensions``
     - ``integer``
     - необов'язковий
     - Кількість вимірів, які повинні мати результуючі вихідні вкладення.
       Підтримується лише у моделях з вбудовуванням тексту-3 та пізніших версіях.

Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             "object": "list",
             "data": [{
                "object": "embedding",
                "embedding": [
                   0.0023064255,
                   ...
                ],
                "index": 0
             }],
             "model": "text-embedding-ada-002",
             "usage": {
                "prompt_tokens": 8,
                "total_tokens": 8
             },
          }


       ``embedding (float)``
         Векторне представлення для заданих вхідних даних.

       ``index (integer)``
         Індекс вбудовування у списку вбудовувань.

       ``parameter_name (string)``
         Ім'я параметра, що налаштовується в мегасервісі OPEA.

       ``data_type (string)``
         Підтримуваний тип даних, ``"string"`` або ``"integer"``.

       Наприклад: ``{"llm": {"max_tokens": "integer"}}``
   * - **405**
     - ``{"error": "Retrieve configurable parameter wrongly."}``

-----

Чат
===

**Необов'язково**. Якщо сервіс OPEA Mega створено з таким URL запиту, він відповідає наведеному нижче формату.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **POST**
     - ``/v1/chat/completions``

.. list-table::
   :header-rows: 1

   * - Тип
     - Параметри
     - Значення
     - Потрібно
     - Опис
   * - **POST**
     - ``message``
     - ``array``
     - необхідний
     - A list of messages comprising the conversation. Refer to the
       `detail format <https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages>`_.
   * - **POST**
     - ``model``
     - ``string``
     - застарілий
     - Ідентифікатор моделі для використання.
   * - **POST**
     - ``frequency_penalty``
     - ``integer``
     - необов'язковий
     - Число від -2.0 до 2.0. Позитивні значення штрафують нові лексеми на основі їхньої вже наявної частоти в тексті, 
       зменшуючи ймовірність того, що модель буде дослівно повторювати один і той самий рядок.
   * - **POST**
     - ``logit_bias``
     - ``map``
     - необов'язковий
     - Змінити ймовірність появи вказаних токенів у завершенні. Приймається JSON-об'єкт, який зіставляє токени 
       (вказані за їх ідентифікатором в токенізаторі) з відповідним значенням зсуву від -100 до 100. Математично, 
       зсув додається до логів, згенерованих моделлю перед вибіркою. Точний ефект залежить від моделі, але значення 
       від -1 до 1 повинні зменшувати або збільшувати ймовірність відбору; значення -100 або 100 
       повинні призводити до заборони або виключного відбору відповідного токена.
   * - **POST**
     - ``logprobs``
     - ``bool``
     - необов'язковий
     -
   * - **POST**
     - ``top_logprobs``
     - ``integer``
     - необов'язковий
     -
   * - **POST**
     - ``max_tokens``
     - ``integer``
     - необов'язковий
     -
   * - **POST**
     - ``n``
     - ``integer``
     - необов'язковий
     -
   * - **POST**
     - ``presence_penalty``
     - ``float``
     - необов'язковий
     -
   * - **POST**
     - ``response_format``
     - ``object``
     - необов'язковий
     -
   * - **POST**
     - ``seed``
     - ``integer``
     - необов'язковий
     -
   * - **POST**
     - ``stop``
     - ``string``
     - необов'язковий
     -
   * - **POST**
     - ``stream``
     - ``bool``
     - необов'язковий
     -
   * - **POST**
     - ``stream_options``
     - ``object``
     - необов'язковий
     -
   * - **POST**
     - ``temperature``
     - ``float``
     - необов'язковий
     -
   * - **POST**
     - ``top_p``
     - ``float``
     - необов'язковий
     -
   * - **POST**
     - ``tools``
     - ``array``
     - необов'язковий
     -
   * - **POST**
     - ``tool_choice``
     - ``string``
     - необов'язковий
     -
   * - **POST**
     - ``user``
     - ``string``
     - необов'язковий
     -

Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             "id": "chatcmpl-123",
             "object": "chat.completion",
             "created": 1677652288,
             "model": "gpt-3.5-turbo-0125",
             "system_fingerprint": "fp_44709d6fcb",

             "choices": [{
                "index": 0,
                "object": "embedding", 
                "message": {
                   "role": "assistant", 
                   "content": "\n\nHello there, how may I assist you today?",
                },
                "logprobs": null,
                "finish_reason": "stop",
             }],

             "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 12,
                "total_tokens": 21
             },
          }


       ``id (string)``
         Унікальний ідентифікатор для завершення чату.

       ``choices (array)``
         Список варіантів завершення чату. Може бути більше одного, якщо ``n`` більше 1.

       ``created (integer)``
         Мітка часу Unix (у секундах), коли було створено завершення чату.

       ``model (string)``
         Модель, що використовується для завершення чату.

       ``system_fingerprint (string)``
         Цей відбиток представляє конфігурацію бекенда, з якою працює модель. 
         Може використовуватися разом з параметром seed request, щоб зрозуміти, 
         коли були внесені зміни в бекенд, які можуть вплинути на детермінізм.

       ``object (string)``
         Тип об'єкта, який завжди є ``"chat.completion"``.

       ``usage (object)``
         Статистика використання для запиту на завершення.

-----

Інші операції
=============

Перевірте опис використання, повернутий у :ref:`list_services`, щоб дізнатися, які ще операції підтримуються цим мегасервісом OPEA.

OPEA Micro Service API
**********************

OPEA Micro Service є будівельним блоком для побудови будь-яких додатків GenAI. 
API мікросервісу OPEA використовується розробниками для побудови мегасервісу OPEA, 
як ланцюжок DAG, і є невидимим для кінцевого користувача.

Embedding Micro Service
=======================

Мікросервіс використовується для генерації векторного представлення вхідних даних.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **POST**
     - ``/v1/embeddings``

.. list-table::
   :header-rows: 1

   * - Тип
     - Параметри
     - Значення
     - Потрібно
     - Опис
   * - **POST**
     - ``input``
     - ``string``
     - необхідний
     - Введіть текст для вбудовування, закодований у вигляді рядка або масиву токенів.
       Щоб вбудувати кілька вхідних даних в один запит, передайте масив рядків або масив масивів токенів. 
       Вхідні дані не повинні перевищувати максимальну кількість вхідних токенів для моделі (8192 токени для text-embedding-ada-002), 
       не можуть бути порожнім рядком, а будь-який масив повинен мати розмірність 2048 або менше
   * - **POST**
     - ``model``
     - ``string``
     - необхідний
     - Ідентифікатор моделі для використання.
   * - **POST**
     - ``encoding_format``
     - ``string``
     - необов'язковий
     - Формат, у якому потрібно повернути вбудовування. Може бути як ``"float"``, так і ``"base64"``. За замовчуванням - ``"float"``.
   * - **POST**
     - ``dimensions``
     - ``integer``
     - необов'язковий
     - Кількість вимірів, які повинні мати результуючі вихідні вкладення. 
   * - **POST**
     - ``user``
     - ``string``
     - необов'язковий
     - Унікальний ідентифікатор, що представляє вашого кінцевого користувача, який може допомогти OpenAI відстежувати та виявляти зловживання.

Выдповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             "object": "list",
             "data": [{
                "object": "embedding",
                "embedding": [
                   0.0023064255,
                   -0.009327292,
                   . . . (1536 floats total for ada-002)
                   -0.0028842222,
                ],
                "index": 0
             }],
             "model": "text-embedding-ada-002",
             "usage": {
                "prompt_tokens": 8,
                "total_tokens": 8
             },
          }


       ``embedding (list of float)``
        Векторне представлення для заданих вхідних даних.
   * - **405**
     - ``{"error": "The request of getting embedding vector fails."}``

-----

Мікросервіс LLM Generation
==========================

Мікросервіс використовується для надання послуги генерації LLM.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **POST**
     - ``/v1/chat/completions``

.. list-table::
   :header-rows: 1

   * - Тип
     - Параметри
     - Значення
     - Потрібно
     - Опис
   * - **POST**
     - ``message``
     - ``array``
     - необхідний
     - Список повідомлень, що складають розмову на даний момент. Приклад коду на Python.
   * - **POST**
     - ``model``
     - ``string``
     - необхідний
     - Ідентифікатор моделі для використання. Детальніше про те, які моделі працюють з API чату, дивіться у таблиці сумісності кінцевих точок моделей.
   * - **POST**
     - ``frequency_penalty``
     - ``float``
     - необов'язковий
     - Число від -2.0 до 2.0. Позитивні значення штрафують нові лексеми на основі їхньої вже наявної частоти в тексті, 
       зменшуючи ймовірність того, що модель буде дослівно повторювати один і той самий рядок.
   * - **POST**
     - ``logit_bias``
     - ``map``
     - необов'язковий
     - Змінює ймовірність появи вказаних токенів в
       завершенні. Приймає JSON-об'єкт, який зіставляє токени (визначені за 
       ідентифікатором токена в токенізаторі) з відповідним значенням зсуву від -100 до 100.
       Математично, зсув додається до логів, згенерованих моделлю
       перед вибіркою. Точний ефект залежить від моделі, але значення
       від -1 до 1 повинні зменшувати або збільшувати ймовірність відбору;
       значення на кшталт -100 або 100 повинні призвести до заборони або виключного відбору
       відповідного токена.
   * - **POST**
     - ``logprobs``
     - ``bool``
     - необов'язковий
     - Повертає лог ймовірностей виведених токенів чи ні. Якщо true,
       повертає лог ймовірності кожної вихідної лексеми, що повертається у
       вмісті повідомлення.
   * - **POST**
     - ``top_logprobs``
     - ``integer``
     - необов'язковий
     - Ціле число від 0 до 20, що вказує кількість найбільш ймовірних токенів
       повернеться у кожній позиції токенів, кожна з яких має відповідну лог
       ймовірністю. Якщо використовується цей параметр, значення ``logprobs`` має бути рівним true.
   * - **POST**
     - ``max_tokens``
     - ``integer``
     - необов'язковий
     - Максимальна кількість токенів, яку можна згенерувати в чаті
       Загальна довжина вхідних токенів та згенерованих токенів
       обмежена довжиною контексту моделі. Приклад коду на Python для підрахунку
       токенів.
   * - **POST**
     - ``n``
     - ``integer``
     - необов'язковий
     - Скільки варіантів завершення чату генерувати для кожного вхідного повідомлення. Зверніть увагу
       що з вас буде стягуватися плата на основі кількості згенерованих токенів за всіма
       всіх варіантів. Щоб мінімізувати витрати, залиште n рівним 1.
   * - **POST**
     - ``presence_penalty``
     - ``float``
     - необов'язковий
     -
   * - **POST**
     - ``response_format``
     - ``object``
     - необов'язковий
     -
   * - **POST**
     - ``seed``
     - ``integer``
     - необов'язковий
     - Ця функція знаходиться в бета-версії. Якщо її вказати, наша система докладе максимум зусиль
       зробити вибірку детерміновано, так що повторні запити з однаковими
       параметрами повинні повертати однаковий результат. Детермінованість не гарантується
       гарантується, і вам слід звернутися до параметра ``system_fingerprint`` відповіді
       для відстеження змін у бекенді.
   * - **POST**
     - ``service_tier``
     - ``string``
     - необов'язковий
     - Вказує рівень затримки для обробки запиту. Цей
       параметр актуальний для клієнтів, які підписані на послугу
       послугу. Якщо встановлено значення ``auto``, система використовуватиме кредити на рівні шкали
       поки вони не будуть вичерпані. Якщо встановлено значення ``default``, запит буде
       буде оброблено з використанням рівня обслуговування за замовчуванням з нижчим рівнем SLA і без
       без гарантії затримки. Коли цей параметр задано, тіло відповіді буде
       міститиме використаний ``service_tier``.
   * - **POST**
     - ``stop``
     - ``string``
     - необов'язковий
     - До 4 послідовностей, після яких API припиняє генерувати подальші токени.
   * - **POST**
     - ``stream``
     - ``bool``
     - необов'язковий
     - Якщо встановлено, буде надіслано часткові дельти повідомлень, як у ChatGPT. Токени будуть
       надсилатимуться як серверні події, що містять лише дані, коли вони стануть доступними, з
       потік завершуватиметься повідомленням data: ``[DONE]`` повідомленням. Приклад коду на Python.
   * - **POST**
     - ``stream_options``
     - ``object``
     - необов'язковий
     - Параметри для потокової відповіді. Встановлюйте цей параметр лише тоді, коли ви встановили ``«stream»: «true"``.
   * - **POST**
     - ``temperature``
     - ``float``
     - необов'язковий
     - Яку температуру відбору проб використовувати, від 0 до 2. Вищі значення, наприклад, 0.8
       зроблять результат більш випадковим, тоді як менші значення, наприклад, 0.2, зроблять
       його більш цілеспрямованим і детермінованим. Зазвичай ми рекомендуємо змінювати цей параметр або ``top_p``, але не обидва.
   * - **POST**
     - ``top_p``
     - ``float``
     - необов'язковий
     - Альтернатива вибірці за температурою, яка називається вибіркою за ядром,
       де модель розглядає результати токенів з ``top_p``
       масою ймовірності. Таким чином, 0.1 означає, що розглядаються тільки токени, що складають верхні 10% імовірнісної
       ймовірнісної маси розглядаються тільки токени, що складають верхні 10%. Зазвичай ми рекомендуємо змінювати цей параметр або
       ``temperature``, але не обидва.
   * - **POST**
     - ``tools``
     - ``array``
     - необов'язковий
     - Список інструментів, які може викликати модель. Наразі підтримуються лише функції
        як інструменти. Використовуйте це, щоб надати список функцій, для яких модель
       може генерувати вхідні дані у форматі JSON. Підтримується максимум 128 функцій.
   * - **POST**
     - ``tool_choice``
     - ``string``
     - необов'язковий
     - Контролює, який інструмент (якщо такий є) викликається моделлю. ``«none»`` означає, що модель
       не буде викликати жодного інструменту, а натомість згенерує повідомлення. ``«auto»`` означає, що
       модель може вибирати між створенням повідомлення та викликом одного або декількох інструментів.
       required означає, що модель повинна викликати один або декілька інструментів. Вказівка конкретного
       конкретного інструменту через 
       ``{«type»: «function», “function”: {«name»: «my_function"}}`` змушує
       модель викликати цей інструмент. ``«none»`` - значення за замовчуванням, якщо інструменти відсутні.
       ``«auto»`` - за замовчуванням, якщо інструменти присутні.


Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             "id": "chatcmpl-123",
             "object": "chat.completion",
             "created": 1677652288,
             "model": "gpt-4o-mini",
             "system_fingerprint": "fp_44709d6fcb",
             "choices": [{
                "index": 0,
                "object": "embedding", 
                "message": {
                   "role": "assistant", 
                   "content": "\n\nHello there, how may I assist you today?",
                },
                "logprobs": null,
                "finish_reason": "stop",
             }],

             "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 12,
                "total_tokens": 21
             },
          }
   * - **405**
     - ``{"error": "The request of LLM generation fails."}``

-----

ASR Micro Service
=================

Мікросервіс використовується для надання послуги «аудіо в текст».

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **POST**
     - ``/v1/asr``

.. list-table::
   :header-rows: 1

   * - Тип
     - Параметри
     - Значення
     - Потрібно
     - Опис
   * - **POST**
     - ``url``
     - ``docarray.AudioUrl``
     - необов'язковий
     - Посилання на аудіо.
   * - **POST**
     - ``model_name_or_path``
     - ``string``
     - необов'язковий
     - Модель, що використовується для перекладу з аудіо на текст.
   * - **POST**
     - ``Language``
     - ``string``
     - необов'язковий
     - Мова, яку модель вважає за краще визначати. За замовчуванням ``«auto»``.

Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Сідповідь
   * - **200**
     - .. code-block::

          {
             "text": string
          }
   * - **405**
     - ``{"error": "The request of ASR fails."}``

-----

RAG Retrieval Micro Service
===========================

Мікросервіс використовується для надання послуги пошуку RAG. Зазвичай це відбувається після
вбудовування мікросервісу і перед переранжуванням RAG мікросервісу для створення RAG мега-сервісу.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **POST**
     - ``/v1/rag_retrieval``

.. list-table::
   :header-rows: 1

   * - Тип
     - Параметри
     - Значення
     - Потрібно
     - Опис
   * - **POST**
     - ``text``
     - ``string``
     - необхідний
     - Вхідний рядок для запиту.
   * - **POST**
     - ``embedding``
     - ``list of float``
     - необхідний
     - Список float для тексту у вигляді векторного представлення.

Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             "retrieved_docs": list of string,
             "initial_query": string,
             "json_encoders": [{
                "text": "I am the agent of chatbot. What can I do for you?",
             },
             ...
             ]
          }
   * - **405**
     - ``{"error": "The request of ASR fails."}``

-----

RAG Reranking Micro Service
===========================

Мікросервіс використовується для надання послуги RAG-переранжування. Зазвичай це відбувається після
отримання RAG і перед мікросервісом генерації LLM.

Запит
-----

.. list-table::
   :header-rows: 1

   * - Метод
     - URL
   * - **POST**
     - ``/v1/rag_reranking``

.. list-table::
   :header-rows: 1

   * - Тип
     - Параметри
     - Значення
     - Потрібен
     - Опис
   * - **POST**
     - ``retrieved_docs``
     - ``list of string``
     - необхідний
     - Документи, які потрібно забрати.
   * - **POST**
     - ``initial_query``
     - ``string``
     - необхідний
     - Рядок для запиту.
   * - **POST**
     - ``json_encoders``
     - ``list of float``
     - необхідний
     - Використаний кодер json.

Відповідь
---------

.. list-table::
   :header-rows: 1

   * - Статус
     - Відповідь
   * - **200**
     - .. code-block::

          {
             "query": string,
             "doc": [{
                "text": "I am the agent of chatbot. What can I do for you?",
             },
             ...
             ]
          }
   * - **405**
     - ``{"error": "The request of ASR fails."}``

