.. _opea_doc_generation:

Створення документації OPEA
###########################

Ці інструкції допоможуть вам створити проектну документацію OPEA та опублікувати її на сайті https://opea-project.github.io.
Ви також можете використовувати ці інструкції для створення документації OPEA у вашій локальній системі.

.. contents::
   :local:
   :depth: 1

Огляд документації
******************

Вміст проекту OPEA написаний з використанням комбінації мов розмітки markdown (``.md``) і reStructuredText (``.rst``) (з розширеннями Sphinx),
і оброблений за допомогою Sphinx для створення відформатованого автономного веб-сайту.
Розробники можуть переглядати цей вміст або в необробленому вигляді у вигляді файлів розмітки .rst, 
або ви можете згенерувати HTML-вміст і переглянути його за допомогою веб-браузера безпосередньо на своїй робочій станції. 
Найкращий досвід читання - це перегляд згенерованого HTML на сайті https://opea-project.github.io.

Детальніше про `markdown`_, `reStructuredText`_ та `Sphinx`_ ви можете прочитати на їхніх відповідних сайтах.

Документація проекту містить наступні пункти:

* Вихідні файли ReStructuredText і markdown, що використовуються для створення документації, можна знайти на
  https://opea-project.github.io. Всі джерела документації
  знаходяться у репозиторіях ``github.com/opea-project``, вкорінених у репозиторії ``docs``.
  Також документація міститься у репозиторіях, де  підтримується код проекту: ``GenAIComps``, ``GenAIEval``, ``GenAIExamples`` і ``GenAIInfra``.

.. graphviz:: images/doc-gen-flow.dot
   :align: center
   :caption: Documentation Generation Flow


Налаштування робочих папок документації
***************************************

Вам потрібно встановити ``git``, щоб налаштувати робочі папки:

* Для системи розробки Ubuntu використовуйте:

  .. code-block:: bash

     sudo apt install git

Ось рекомендоване налаштування папок для внесків та генерації документації:
батьківська папка з назвою ``opea-project`` містить шість локально клонованих репозиторіїв з opea-project.
Ви можете використати іншу назву для батьківської теки, але процес збірки документації передбачає,
що назви сховищ будуть такими, як показано тут:

.. code-block:: none

   opea-project
   ├── docs
   ├── GenAIComps
   ├── GenAIEval
   ├── GenAIExamples
   ├── GenAIInfra
   ├── opea-project.github.io

Батьківська папка ``opea-project`` призначена для організації клонованих репозиторіїв з проекту.
Якщо у вас є права на публікацію репозиторію, ми також клонуємо репозиторій публікації opea-project.github.io пізніше в цих кроках.

На наступних кроках ви створите вилку всіх репозиторіїв проекту OPEA, необхідних для створення документації, у вашому особистому акаунті GitHub, 
клонуєте вашу особисту вилку на ваш локальний комп'ютер для розробки, а потім прив'яжете її до висхідного репозиторію. 
Вам потрібно буде зробити це лише один раз, щоб налаштувати структуру папок:

#. За допомогою браузера перейдіть на https://github.com/opea-project і зробіть форк репозиторію **docs** до вашого особистого акаунта на GitHub.

   .. image:: images/opea-docs-fork.png
      :align: center
      :class: drop-shadow

#. У командному рядку створіть робочу папку на вашому комп'ютері для розробки та
   клонуйте ваше персональний репозиторій ``docs``:

   .. code-block:: bash

      cd ~
      mkdir opea-project && cd opea-project
      git clone https://github.com/<github-username>/docs.git

#. Для клонованого локального репозиторію повідомте git про попередній репозиторій:

   .. code-block:: bash

      cd docs
      git remote add upstream https://github.com/opea-project/docs.git

   Після цього у вас з'явиться ``origin``, що вказує на ваш клонований особистий репозиторій, і ``upstream``, що вказує на репозиторій проєкту.

#. Виконайте ті ж самі дії (розгалуження на ваш особистий акаунт, клонування на локальний комп'ютер і налаштування віддаленого доступу до git'а) для інших репозиторіїв,
   що містять документацію проекту, замінивши назву репозиторію docs.git у попередньому кроці на відповідну назву репозиторію у цьому переліку:

   * GenAIComps
   * GenAIEval
   * GenAIExamples
   * GenAIInfra


#. Якщо ви ще не зробили цього, обов'язково налаштуйте git з вашим ім'ям та адресою електронної пошти для рядка ``Підписано: by`` у ваших повідомленнях про комміти.:

   .. code-block:: bash

      git config --global user.name "David Developer"
      git config --global user.email "david.developer@company.com"

Встановлення інструментів для документування
********************************************

Наша обробка документації була протестована для роботи з Python 3.8.10 і новіших версій, а також з цими іншими інструментами:

* sphinx                    version: 7.3.0
* docutils                  version: 0.20
* sphinx-rtd-theme          version: 2.0.0
* sphinx-tabs               version: 3.4.5
* myst-parser               version: 3.0.1
* sphinxcontrib-mermaid     version: 0.9.2
* pymarkdownlnt             version: 0.9.21

Залежно від версії Linux, встановіть необхідні інструменти.
Вам слід розглянути можливість використання інструментів `Python virtual environment`_,
щоб захистити ваше середовище Python від змін, спричинених іншими роботами на вашому комп'ютері.

.. _Python virtual environment: https://https://docs.python.org/3/library/venv.html

Для Ubuntu використовуйте:

.. code-block:: bash

   sudo apt install python3-pip python3-wheel make graphviz

Потім за допомогою ``pip3`` встановіть решту інструментів на основі Python, зазначених у файлі ``cripts/requirements.txt``.

.. code-block:: bash

   cd ~/opea-project/docs
   pip3 install --user -r scripts/requirements.txt

Використовуйте цю команду, щоб додати ``$HOME/.local/bin`` до початку вашого ``PATH``, 
щоб система знайшла очікувані версії таких утиліт Python, 
як ``phinx-build`` (попередньо перевірте, чи ця тека вже є у вашому шляху):

.. code-block:: bash

   printf "\nexport PATH=\$HOME/.local/bin:\$PATH" >> ~/.bashrc

.. important::

   Щоб ця зміна набула чинності, вам потрібно буде відкрити новий термінал. Додавання цього параметра до файлу ``~/.bashrc`` гарантує, що його буде встановлено за замовчуванням.

Після цього ви готові до створення документації.

.. Примітка::

   Ми надали скрипт у репозиторії docs, який ви можете запустити, щоб побачити,
   які версії інструментів для створення документації встановлено,
   і порівняти їх з версіями інструментів, показаними вище. Цей інструмент також перевірить, 
   чи ви використовуєте версії інструментів, які, як відомо, працюють разом::

      docs/scripts/show-versions.py

   наприклад:

   .. code-block:: console

      ~/opea-project/docs$ scripts/show-versions.py

      doc build tool versions found on your system per /home/david/opea-project/docs/scripts/requirements.txt...

      sphinx                    version: 7.3.0
      docutils                  version: 0.20
      sphinx-rtd-theme          version: 2.0.0
      sphinx-tabs               version: 3.4.5
      myst-parser               version: 3.0.1
      sphinx-md                 version: 0.0.3
      sphinxcontrib-mermaid     version: 0.9.2
      pymarkdownlnt             version: 0.9.21

Тема презентації документації  
*****************************

Sphinx підтримує просту настройку зовнішнього вигляду створеної HTML-документації за допомогою тем.
Тема ``phinx-rtd-theme`` (Read The Docs) встановлюється як частина списку ``requirements.txt`` вище. 
Налаштування стандартного вигляду ``read-the-docs`` додаються за допомогою CSS і JavaScript, які можна знайти у ``doc/_static``, 
а також перевизначення шаблонів теми, які можна знайти у ``doc/_templates``. 
Якщо ви перейдете на іншу тему, вам доведеться змінити ці налаштування, а це не для людей зі слабкими нервами.

Система збирання Sphinx створює інформацію кешу документів, яка намагається прискорити відновлення документації, 
але іноді може спричинити появу несподіваної помилки або попередження. 
Виконання ``make clean`` для створення чистого середовища збирання і повторне виконання ``make html`` зазвичай виправляє ці проблеми.


Запущення процесорів документації
*********************************

Папка ``docs`` (з усіма клонованими репозиторіями) містить усі вихідні файли doc, зображення, додаткові інструменти та
``Makefile`` для створення локальної копії технічної документації OPEA. Найкраще починати з чистого середовища збірки документації, 
тому скористайтеся ``make clean``, щоб вилучити робочу теку ``_build``, якщо вона існує. 
За допомогою ``makefile`` створюється папка ``_build`` (якщо вона не існує) і копіюються всі необхідні файли з цих клонованих сховищ до робочої папки ``_build/rst``.

.. code-block:: bash

   cd ~/opea-project/docs
   make clean
   make html

Залежно від вашої системи розробки, збір і генерація HTML-контенту займе менше хвилини. 
Після завершення ви можете переглянути вихідні дані HTML у файлі ``~/opea-project/docs/_build/html/index.html``.

Для зручності існує ціль make, яка буде ``cd`` до папки ``_build/html`` і запустить локальний веб-сервер Python:

.. code-block:: bash

   make server

і відкрийте URL-адресу за допомогою веб-браузера: ``http://localhost:8000``. 
Після цього натисніть :kbd:`ctrl-C` у вікні командного рядка, щоб зупинити веб-сервер.

Опублікування вмісту
********************

Якщо у вас є права на об'єднання в репозиторій opea-project під назвою ``opea-project.github.io``, 
ви можете оновити загальнодоступну документацію проекту, яку можна знайти за адресою https://opea-project.github.io.

Вам потрібно буде зробити одноразовий клон висхідного репозиторію (ми публікуємо безпосередньо в висхідний репозиторій, а не в особисту форковану копію):

.. code-block:: bash

   cd ~/opea-project
   git clone https://github.com/opea-project/opea-project.github.io.git

Після того, як ви переконалися, що згенерований HTML, створений за допомогою ``make html``, виглядає добре, ви можете відправляти його на сайт для публікації:

.. code-block:: bash

   make publish

Він використовує команди git для синхронізації нового контенту з уже опублікованим і видаляє файли з папки **latest** репозиторію публікації, які більше не потрібні. 
Нові або змінені файли з новоствореного HTML-контенту переміщуються до репозиторію публікацій сторінок GitHub. 
Загальнодоступний сайт за адресою https://opea-project.github.io буде автоматично оновлений системою `GitHub pages <https://guides.github.com/features/pages/>`_, 
зазвичай протягом декількох хвилин.


Керування версіями документів
*****************************

На сайті https://opea-project.github.io у верхній частині лівої навігаційної панелі є селектор версій документів. 
Вміст цього перемикача версій визначається у конфігураційному файлі ``conf.py`` сфінкса, а саме приблизно так:

.. code-block:: python
   :emphasize-lines: 5-6

   html_context = {
      'current_version': current_version,
      'docs_title': docs_title,
      'is_release': is_release,
      'versions': ( ("latest", "/latest/"),
                    ("0.8", "/0.8/"),
                    ("0.7", "/0.7/"),
                  )
       }


У міру додавання нових версій документації OPEA, як правило, при випуску нового релізу, оновлюйте цей список вибору "версій", 
щоб включити номер версії та папку публікації. Зауважте, що не існує прямого вибору для переходу до новішої версії зі старішої, без попереднього переходу до "найновішої".

За замовчуванням, збірка і публікація документації передбачають, що ми створюємо документацію для головної гілки 
і публікуємо її у розділі ``/latest/`` на https://opea-project.github.io. 
Якщо ми створюємо документацію для тегованої версії (наприклад, 0.8), перевірте цю версію у **всіх** сховищах компонентів і додайте кілька додаткових прапорів до команд ``make``:

.. code-block:: bash

   version=0.8
   for d in docs GenAIComps GenAIExamples GenAIEval GenAIInfra ; do
    cd ~/opea-project/$d
    git checkout $version
   done

   cd ~/opea-project/docs
   make clean
   make DOC_TAG=release RELEASE=$version html
   make DOC_TAG=release RELEASE=$version publish

.. _filter_expected:

Фільтрувати очікувані попередження
**********************************

На жаль, є деякі відомі проблеми з обробкою Sphinx, які генерують попередження. Ми додали фільтр постобробки на виході процесу збирання документації, 
щоб перевірити наявність "очікуваних" попереджень у згенерованому виводі журналу. Таким чином, буде повідомлено лише про "неочікувані" повідомлення, 
які призведуть до збою у процесі збирання з повідомленням:

.. code-block:: console

   New errors/warnings found, please fix them:

за якими слідують повідомлення, яких не очікувалося. Зверніть увагу, що імена файлів, показані у повідомленнях про помилки/попередження, 
стосуються файлів з теки ``_build/rst`` (скопійованих з репозиторіїв). Наприклад,

.. code-block:: console

   New errors/warnings found, please fix them:
   ==============================================

   /home/david/opea-project/docs/_build/rst/GenAIInfra/kubernetes-addons/Observability/README.md:5: WARNING: Non-consecutive header level increase; H1 to H4 [myst.header]
   /home/david/opea-project/docs/_build/rst/GenAIInfra/kubernetes-addons/Observability/README.md:111: WARNING: Non-consecutive header level increase; H3 to H6 [myst.header]

Для файлів, скопійованих з репозиторіїв, відмінних від репозиторію docs, ви побачите назву репозиторію
у шляху до файлу, наприклад, ``_build/rst/GenAIInfra`` зі шляхом до
конкретного файлу з проблемою. Наприклад, попередження, показані тут, вказують на
проблему на рівні заголовків у рядках 5 і 111 у файлі
``GenAIInfra/kubernetes-addons/Observability/README.md``.

Якщо ви зробите ``make html`` без попереднього виконання ``make clean``, можуть залишитися файли з попередньої збірки, 
які можуть спричинити появу деяких несподіваних повідомлень.

Якщо всі повідомлення було відфільтровано, процес збирання завершиться успішно, повідомивши:

.. code-block:: console

   No new errors/warnings.

Вихідні дані збірки Sphinx обробляються скриптом Python ``scripts/filter-known-issues.py`` разом з набором файлів конфігурації фільтрів у теці ``.known-issues``. 
(Ця фільтрація виконується як частина ``Makefile``).

Ви можете змінити фільтрацію, додавши або відредагувавши conf-файл у папці ``.known-issues``, слідуючи прикладам, наведеним у ньому.

.. _reStructuredText: https://sphinx-doc.org/rest.html
.. _markdown: https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax
.. _Sphinx: https://sphinx-doc.org/
